import { Modal, Form, Button } from 'react-bootstrap';
import { useMutation, useQueryClient } from '@tanstack/react-query';

import { VulnerabilityModalProps } from './vulnerabilityModal.types';
import { createVulnerability, editVulnerability } from '../../services/vulnerabilitiesService';
import { VulnerabilityInsert } from '../../types/models/vulnerability';
import * as Enums from '../../types/enums';
import { ErrorBanner } from '../error-banner/errorBanner';

const VulnerabilityModal = ({ show, handleClose, data, project_id }: VulnerabilityModalProps) => {
  const {
    id,
    title,
    description,
    severity,
    status,
    targets,
    source,
    tags,
    attack_vector,
    cwe,
    impact,
    type,
    comments,
    suggested_fix,
  } = data ?? {};

  const queryClient = useQueryClient();
  const mutation = useMutation({
    mutationFn: data ? editVulnerability : createVulnerability,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] });
      handleClose();
    },
  });
  const { mutate, isError, error } = mutation;

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const form = e.currentTarget;
    const data = new FormData(form);

    const formPayload: VulnerabilityInsert = {
      ...(id && { id: id }),
      ...(project_id && { project_id: project_id }),
      title: data.get('title') as string,
      project_id: '06b7dd20-2994-45d7-bfcc-c9b372fcbfe9',
      ...(data.get('description') && { description: data.get('description') as string }),
      severity: data.get('severity') as Enums.SeverityLevel,
      cwe: data.get('cwe') as string,
      ...(data.get('suggested_fix') && { suggested_fix: data.get('suggested_fix') as string }),
      type: data.get('type') as Enums.VulnerabilityType,
      attack_vector: data.get('attack_vector') as Enums.AttackVector,
      impact: data.get('impact') as Enums.ImpactType,
      status: data.get('status') as Enums.StatusType,
      source: data.get('source') as Enums.SourceType,
      ...(data.get('comments') && { comments: data.get('comments') as string }),
      ...(!!data.getAll('tags')[0] && { tags: data.getAll('tags') as string[] }),
      targets: data.getAll('targets') as string[],
    };
    mutate(formPayload);
  };

  return (
    <>
      <Modal show={show} onHide={handleClose} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>{!data ? 'Create New Vulnerability' : 'Edit Vulnerability'}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form id="vulForm" onSubmit={handleSubmit}>
            <Form.Group controlId="formTitle" className="mb-3">
              <Form.Label>Title</Form.Label>
              <Form.Control name="title" {...(title && { defaultValue: title })} required />
            </Form.Group>

            <Form.Group controlId="formDescription" className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                name="description"
                as="textarea"
                rows={2}
                {...(description && { defaultValue: description })}
              />
            </Form.Group>

            <Form.Group controlId="formStatus" className="mb-3">
              <Form.Label>Status</Form.Label>
              <Form.Select name="status" required defaultValue={status ? status : ''}>
                <option value="" disabled>
                  Select status…
                </option>
                {Object.values(Enums.StatusType).map(st => (
                  <option key={st} value={st}>
                    {st.charAt(0).toUpperCase() + st.slice(1)}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formSeverity" className="mb-3">
              <Form.Label>Severity</Form.Label>
              <Form.Select name="severity" required defaultValue={severity ? severity : ''}>
                <option value="" disabled>
                  Select severity…
                </option>
                {Object.values(Enums.SeverityLevel).map(level => (
                  <option key={level} value={level}>
                    {level.charAt(0).toUpperCase() + level.slice(1)}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formType" className="mb-3">
              <Form.Label>Type</Form.Label>
              <Form.Select name="type" required defaultValue={type ? type : ''}>
                <option value="" disabled>
                  Select type…
                </option>
                {Object.values(Enums.VulnerabilityType).map(type => (
                  <option key={type} value={type}>
                    {type
                      .split(/[\s-]/)
                      .map(w => w.charAt(0).toUpperCase() + w.slice(1))
                      .join(' ')}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formCwe" className="mb-3">
              <Form.Label>CWE (e.g. CWE-79)</Form.Label>
              <Form.Control name="cwe" type="text" required {...(cwe && { defaultValue: cwe })} />
            </Form.Group>

            <Form.Group controlId="formSuggestedFix" className="mb-3">
              <Form.Label>Suggested Fix</Form.Label>
              <Form.Control
                name="suggested_fix"
                as="textarea"
                rows={2}
                {...(suggested_fix && { defaultValue: suggested_fix })}
              />
            </Form.Group>

            <Form.Group controlId="formAttackVector" className="mb-3">
              <Form.Label>Attack Vector</Form.Label>
              <Form.Select
                name="attack_vector"
                required
                defaultValue={attack_vector ? attack_vector : ''}
              >
                <option value="" disabled>
                  Select attack vector…
                </option>
                {Object.values(Enums.AttackVector).map(av => (
                  <option key={av} value={av}>
                    {av.charAt(0).toUpperCase() + av.slice(1)}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formImpact" className="mb-3">
              <Form.Label>Impact</Form.Label>
              <Form.Select name="impact" required defaultValue={impact ? impact : ''}>
                <option value="" disabled>
                  Select impact…
                </option>
                {Object.values(Enums.ImpactType).map(im => (
                  <option key={im} value={im}>
                    {im.charAt(0).toUpperCase() + im.slice(1)}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formSource" className="mb-3">
              <Form.Label>Source</Form.Label>
              <Form.Select name="source" required defaultValue={source ? source : ''}>
                <option value="" disabled>
                  Select source…
                </option>
                {Object.values(Enums.SourceType).map(src => (
                  <option key={src} value={src}>
                    {src.charAt(0).toUpperCase() + src.slice(1)}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group controlId="formTargets" className="mb-3">
              <Form.Label>Targets</Form.Label>
              <Form.Control
                name="targets"
                type="text"
                placeholder="Comma separated"
                required
                {...(targets && { defaultValue: targets })}
              />
            </Form.Group>

            <Form.Group controlId="formTags" className="mb-3">
              <Form.Label>Tags</Form.Label>
              <Form.Control
                name="tags"
                type="text"
                placeholder="Comma separated"
                {...(tags && { defaultValue: tags })}
              />
            </Form.Group>

            <Form.Group controlId="formComments" className="mb-3">
              <Form.Label>Comments</Form.Label>
              <Form.Control
                name="comments"
                as="textarea"
                rows={2}
                {...(comments && { defaultValue: comments })}
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button className="secondary-color border-0" onClick={handleClose}>
            Close
          </Button>
          <Button type="submit" form="vulForm" className="primary-color border-0">
            Save Changes
          </Button>
        </Modal.Footer>
      </Modal>
      {isError && <ErrorBanner message={error.message} />}
    </>
  );
};

export default VulnerabilityModal;
